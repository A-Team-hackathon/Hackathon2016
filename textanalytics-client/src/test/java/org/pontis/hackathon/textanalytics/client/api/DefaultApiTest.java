/**
 * Azure Machine Learning - Text Analytics
 * The Text Analytics API is a suite of text analytics web services built with Azure Machine Learning.   The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection.   No training data is needed to use this API; just bring your text data.   This API uses advanced natural language processing techniques to deliver best in class predictions.    Further documentation can be found in https://azure.microsoft.com/en-us/documentation/articles/machine-learning-apps-text-analytics/
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.pontis.hackathon.textanalytics.client.api;

import org.pontis.hackathon.ApiException;
import org.pontis.hackathon.textanalytics.client.model.BatchInputV2;
import org.pontis.hackathon.textanalytics.client.model.LanguageBatchResultV2;
import org.pontis.hackathon.textanalytics.client.model.ErrorResponse;
import org.pontis.hackathon.textanalytics.client.model.TopicDetectionInputV2;
import org.pontis.hackathon.textanalytics.client.model.MultiLanguageBatchInputV2;
import org.pontis.hackathon.textanalytics.client.model.MultiLanguageInputV2;
import org.pontis.hackathon.textanalytics.client.model.KeyPhraseBatchResultV2;
import org.pontis.hackathon.textanalytics.client.model.OperationResult;
import org.pontis.hackathon.textanalytics.client.model.SentimentBatchResultV2;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * The API returns the detected language and a numeric score between 0 and 1.               Scores close to 1 indicate 100% certainty that the identified language is true.               A total of 120 languages are supported.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detectLanguageTest() throws ApiException {
        Integer numberOfLanguagesToDetect = null;
        String subscriptionKey = null;
        String ocpApimSubscriptionKey = null;
        BatchInputV2 batchInputV2 = null;
        // LanguageBatchResultV2 response = api.detectLanguage(numberOfLanguagesToDetect, subscriptionKey, ocpApimSubscriptionKey, batchInputV2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The API returns the top detected topics for a list of submitted text documents.               A topic is identified with a key phrase, which can be one or more related words.               Use the URL parameters and stop word list to control which words or documents are filtered out.               You can also supply a list of topics to exclude from the response.               At least 100 text documents must be submitted, however it is designed to detect topics across hundreds to thousands of documents.               Note that one transaction is charged per text document submitted.               For best performance, limit each document to a short, human written text paragraph such as review, conversation or user feedback.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detectTopicsTest() throws ApiException {
        Integer minDocumentsPerWord = null;
        Integer maxDocumentsPerWord = null;
        String subscriptionKey = null;
        String ocpApimSubscriptionKey = null;
        TopicDetectionInputV2 topicDetectionInputV2 = null;
        // api.detectTopics(minDocumentsPerWord, maxDocumentsPerWord, subscriptionKey, ocpApimSubscriptionKey, topicDetectionInputV2);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The API returns a list of strings denoting the key talking points in the input text.               We employ techniques from Microsoft Office&#39;s sophisticated Natural Language Processing toolkit.               Currently, the following languages are supported: English, German, Spanish and Japanese.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void keyPhrasesTest() throws ApiException {
        String subscriptionKey = "9aa00ea97c5e4753b97e54507f9eb03b";
        String ocpApimSubscriptionKey = "9aa00ea97c5e4753b97e54507f9eb03b";
        MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = new MultiLanguageBatchInputV2();
        List<MultiLanguageInputV2> documents = new ArrayList<>();
        MultiLanguageInputV2 document = new MultiLanguageInputV2();
        document.setLanguage("en");
        document.setId("goat");
        document.setText("@ATT @LGUSAMobile I've had this problem about memory for a while now and it's getting to the point where I think on switching brands");
		documents.add(document);
		multiLanguageBatchInputV2.setDocuments(documents);
        KeyPhraseBatchResultV2 response = api.keyPhrases(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2);
        response.getDocuments().get(0).getKeyPhrases();
        System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get the status of an operation submitted for processing. If the the operation has reached a &#39;Succeeded&#39; state, will also return the result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void operationStatusTest() throws ApiException {
        String operationId = null;
        String subscriptionKey = null;
        String ocpApimSubscriptionKey = null;
        // OperationResult response = api.operationStatus(operationId, subscriptionKey, ocpApimSubscriptionKey);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The API returns a numeric score between 0 and 1.               Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment.               Sentiment score is generated using classification techniques.               The input features to the classifier include n-grams, features generated from part-of-speech tags, and word embeddings.               Currently, the following languages are supported: English, Spanish, French, Portuguese.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sentimentTest() throws ApiException {
        String subscriptionKey = null;
        String ocpApimSubscriptionKey = null;
        MultiLanguageBatchInputV2 multiLanguageBatchInputV2 = null;
        // SentimentBatchResultV2 response = api.sentiment(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2);

        // TODO: test validations
    }
    
}
