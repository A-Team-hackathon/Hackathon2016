/**
 * Azure Machine Learning - Text Analytics
 * The Text Analytics API is a suite of text analytics web services built with Azure Machine Learning.   The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction and language detection.   No training data is needed to use this API; just bring your text data.   This API uses advanced natural language processing techniques to deliver best in class predictions.    Further documentation can be found in https://azure.microsoft.com/en-us/documentation/articles/machine-learning-apps-text-analytics/
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.pontis.hackathon.textanalytics.client.api;

import org.pontis.hackathon.ApiCallback;
import org.pontis.hackathon.ApiClient;
import org.pontis.hackathon.ApiException;
import org.pontis.hackathon.ApiResponse;
import org.pontis.hackathon.Configuration;
import org.pontis.hackathon.Pair;
import org.pontis.hackathon.ProgressRequestBody;
import org.pontis.hackathon.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.pontis.hackathon.textanalytics.client.model.BatchInputV2;
import org.pontis.hackathon.textanalytics.client.model.LanguageBatchResultV2;
import org.pontis.hackathon.textanalytics.client.model.ErrorResponse;
import org.pontis.hackathon.textanalytics.client.model.TopicDetectionInputV2;
import org.pontis.hackathon.textanalytics.client.model.MultiLanguageBatchInputV2;
import org.pontis.hackathon.textanalytics.client.model.KeyPhraseBatchResultV2;
import org.pontis.hackathon.textanalytics.client.model.OperationResult;
import org.pontis.hackathon.textanalytics.client.model.SentimentBatchResultV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for detectLanguage */
    private com.squareup.okhttp.Call detectLanguageCall(Integer numberOfLanguagesToDetect, String subscriptionKey, String ocpApimSubscriptionKey, BatchInputV2 batchInputV2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchInputV2;
        

        // create path and map variables
        String localVarPath = "/languages".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (numberOfLanguagesToDetect != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "numberOfLanguagesToDetect", numberOfLanguagesToDetect));
        if (subscriptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subscription-key", subscriptionKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ocpApimSubscriptionKey != null)
        localVarHeaderParams.put("Ocp-Apim-Subscription-Key", apiClient.parameterToString(ocpApimSubscriptionKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The API returns the detected language and a numeric score between 0 and 1.               Scores close to 1 indicate 100% certainty that the identified language is true.               A total of 120 languages are supported.
     * @param numberOfLanguagesToDetect Format - int32. (Optional) Number of languages to detect. Set to 1 by default. (optional)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param batchInputV2  (optional)
     * @return LanguageBatchResultV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LanguageBatchResultV2 detectLanguage(Integer numberOfLanguagesToDetect, String subscriptionKey, String ocpApimSubscriptionKey, BatchInputV2 batchInputV2) throws ApiException {
        ApiResponse<LanguageBatchResultV2> resp = detectLanguageWithHttpInfo(numberOfLanguagesToDetect, subscriptionKey, ocpApimSubscriptionKey, batchInputV2);
        return resp.getData();
    }

    /**
     * 
     * The API returns the detected language and a numeric score between 0 and 1.               Scores close to 1 indicate 100% certainty that the identified language is true.               A total of 120 languages are supported.
     * @param numberOfLanguagesToDetect Format - int32. (Optional) Number of languages to detect. Set to 1 by default. (optional)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param batchInputV2  (optional)
     * @return ApiResponse&lt;LanguageBatchResultV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LanguageBatchResultV2> detectLanguageWithHttpInfo(Integer numberOfLanguagesToDetect, String subscriptionKey, String ocpApimSubscriptionKey, BatchInputV2 batchInputV2) throws ApiException {
        com.squareup.okhttp.Call call = detectLanguageCall(numberOfLanguagesToDetect, subscriptionKey, ocpApimSubscriptionKey, batchInputV2, null, null);
        Type localVarReturnType = new TypeToken<LanguageBatchResultV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The API returns the detected language and a numeric score between 0 and 1.               Scores close to 1 indicate 100% certainty that the identified language is true.               A total of 120 languages are supported.
     * @param numberOfLanguagesToDetect Format - int32. (Optional) Number of languages to detect. Set to 1 by default. (optional)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param batchInputV2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectLanguageAsync(Integer numberOfLanguagesToDetect, String subscriptionKey, String ocpApimSubscriptionKey, BatchInputV2 batchInputV2, final ApiCallback<LanguageBatchResultV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectLanguageCall(numberOfLanguagesToDetect, subscriptionKey, ocpApimSubscriptionKey, batchInputV2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LanguageBatchResultV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for detectTopics */
    private com.squareup.okhttp.Call detectTopicsCall(Integer minDocumentsPerWord, Integer maxDocumentsPerWord, String subscriptionKey, String ocpApimSubscriptionKey, TopicDetectionInputV2 topicDetectionInputV2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = topicDetectionInputV2;
        

        // create path and map variables
        String localVarPath = "/topics".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (minDocumentsPerWord != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "minDocumentsPerWord", minDocumentsPerWord));
        if (maxDocumentsPerWord != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "maxDocumentsPerWord", maxDocumentsPerWord));
        if (subscriptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subscription-key", subscriptionKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ocpApimSubscriptionKey != null)
        localVarHeaderParams.put("Ocp-Apim-Subscription-Key", apiClient.parameterToString(ocpApimSubscriptionKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The API returns the top detected topics for a list of submitted text documents.               A topic is identified with a key phrase, which can be one or more related words.               Use the URL parameters and stop word list to control which words or documents are filtered out.               You can also supply a list of topics to exclude from the response.               At least 100 text documents must be submitted, however it is designed to detect topics across hundreds to thousands of documents.               Note that one transaction is charged per text document submitted.               For best performance, limit each document to a short, human written text paragraph such as review, conversation or user feedback.
     * @param minDocumentsPerWord Format - int32. (optional) Words that occur in less than this many documents are ignored.               Use this parameter to help exclude rare document topics.              Omit to let the service choose appropriate value. (optional)
     * @param maxDocumentsPerWord Format - int32. (optional) Words that occur in more than this many documents are ignored.               Use this parameter to help exclude ubiquitous document topics.              Omit to let the service choose appropriate value. (optional)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param topicDetectionInputV2  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void detectTopics(Integer minDocumentsPerWord, Integer maxDocumentsPerWord, String subscriptionKey, String ocpApimSubscriptionKey, TopicDetectionInputV2 topicDetectionInputV2) throws ApiException {
        detectTopicsWithHttpInfo(minDocumentsPerWord, maxDocumentsPerWord, subscriptionKey, ocpApimSubscriptionKey, topicDetectionInputV2);
    }

    /**
     * 
     * The API returns the top detected topics for a list of submitted text documents.               A topic is identified with a key phrase, which can be one or more related words.               Use the URL parameters and stop word list to control which words or documents are filtered out.               You can also supply a list of topics to exclude from the response.               At least 100 text documents must be submitted, however it is designed to detect topics across hundreds to thousands of documents.               Note that one transaction is charged per text document submitted.               For best performance, limit each document to a short, human written text paragraph such as review, conversation or user feedback.
     * @param minDocumentsPerWord Format - int32. (optional) Words that occur in less than this many documents are ignored.               Use this parameter to help exclude rare document topics.              Omit to let the service choose appropriate value. (optional)
     * @param maxDocumentsPerWord Format - int32. (optional) Words that occur in more than this many documents are ignored.               Use this parameter to help exclude ubiquitous document topics.              Omit to let the service choose appropriate value. (optional)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param topicDetectionInputV2  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> detectTopicsWithHttpInfo(Integer minDocumentsPerWord, Integer maxDocumentsPerWord, String subscriptionKey, String ocpApimSubscriptionKey, TopicDetectionInputV2 topicDetectionInputV2) throws ApiException {
        com.squareup.okhttp.Call call = detectTopicsCall(minDocumentsPerWord, maxDocumentsPerWord, subscriptionKey, ocpApimSubscriptionKey, topicDetectionInputV2, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The API returns the top detected topics for a list of submitted text documents.               A topic is identified with a key phrase, which can be one or more related words.               Use the URL parameters and stop word list to control which words or documents are filtered out.               You can also supply a list of topics to exclude from the response.               At least 100 text documents must be submitted, however it is designed to detect topics across hundreds to thousands of documents.               Note that one transaction is charged per text document submitted.               For best performance, limit each document to a short, human written text paragraph such as review, conversation or user feedback.
     * @param minDocumentsPerWord Format - int32. (optional) Words that occur in less than this many documents are ignored.               Use this parameter to help exclude rare document topics.              Omit to let the service choose appropriate value. (optional)
     * @param maxDocumentsPerWord Format - int32. (optional) Words that occur in more than this many documents are ignored.               Use this parameter to help exclude ubiquitous document topics.              Omit to let the service choose appropriate value. (optional)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param topicDetectionInputV2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call detectTopicsAsync(Integer minDocumentsPerWord, Integer maxDocumentsPerWord, String subscriptionKey, String ocpApimSubscriptionKey, TopicDetectionInputV2 topicDetectionInputV2, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = detectTopicsCall(minDocumentsPerWord, maxDocumentsPerWord, subscriptionKey, ocpApimSubscriptionKey, topicDetectionInputV2, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for keyPhrases */
    private com.squareup.okhttp.Call keyPhrasesCall(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = multiLanguageBatchInputV2;
        

        // create path and map variables
        String localVarPath = "/keyPhrases".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (subscriptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subscription-key", subscriptionKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ocpApimSubscriptionKey != null)
        localVarHeaderParams.put("Ocp-Apim-Subscription-Key", apiClient.parameterToString(ocpApimSubscriptionKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The API returns a list of strings denoting the key talking points in the input text.               We employ techniques from Microsoft Office&#39;s sophisticated Natural Language Processing toolkit.               Currently, the following languages are supported: English, German, Spanish and Japanese.
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param multiLanguageBatchInputV2  (optional)
     * @return KeyPhraseBatchResultV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyPhraseBatchResultV2 keyPhrases(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2) throws ApiException {
        ApiResponse<KeyPhraseBatchResultV2> resp = keyPhrasesWithHttpInfo(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2);
        return resp.getData();
    }

    /**
     * 
     * The API returns a list of strings denoting the key talking points in the input text.               We employ techniques from Microsoft Office&#39;s sophisticated Natural Language Processing toolkit.               Currently, the following languages are supported: English, German, Spanish and Japanese.
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param multiLanguageBatchInputV2  (optional)
     * @return ApiResponse&lt;KeyPhraseBatchResultV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyPhraseBatchResultV2> keyPhrasesWithHttpInfo(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2) throws ApiException {
        com.squareup.okhttp.Call call = keyPhrasesCall(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2, null, null);
        Type localVarReturnType = new TypeToken<KeyPhraseBatchResultV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The API returns a list of strings denoting the key talking points in the input text.               We employ techniques from Microsoft Office&#39;s sophisticated Natural Language Processing toolkit.               Currently, the following languages are supported: English, German, Spanish and Japanese.
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param multiLanguageBatchInputV2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call keyPhrasesAsync(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2, final ApiCallback<KeyPhraseBatchResultV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = keyPhrasesCall(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyPhraseBatchResultV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for operationStatus */
    private com.squareup.okhttp.Call operationStatusCall(String operationId, String subscriptionKey, String ocpApimSubscriptionKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling operationStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/operations/{operationId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "operationId" + "\\}", apiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (subscriptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subscription-key", subscriptionKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ocpApimSubscriptionKey != null)
        localVarHeaderParams.put("Ocp-Apim-Subscription-Key", apiClient.parameterToString(ocpApimSubscriptionKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Get the status of an operation submitted for processing. If the the operation has reached a &#39;Succeeded&#39; state, will also return the result.
     * @param operationId A unique id for the submitted operation. (required)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @return OperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OperationResult operationStatus(String operationId, String subscriptionKey, String ocpApimSubscriptionKey) throws ApiException {
        ApiResponse<OperationResult> resp = operationStatusWithHttpInfo(operationId, subscriptionKey, ocpApimSubscriptionKey);
        return resp.getData();
    }

    /**
     * 
     * Get the status of an operation submitted for processing. If the the operation has reached a &#39;Succeeded&#39; state, will also return the result.
     * @param operationId A unique id for the submitted operation. (required)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @return ApiResponse&lt;OperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OperationResult> operationStatusWithHttpInfo(String operationId, String subscriptionKey, String ocpApimSubscriptionKey) throws ApiException {
        com.squareup.okhttp.Call call = operationStatusCall(operationId, subscriptionKey, ocpApimSubscriptionKey, null, null);
        Type localVarReturnType = new TypeToken<OperationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the status of an operation submitted for processing. If the the operation has reached a &#39;Succeeded&#39; state, will also return the result.
     * @param operationId A unique id for the submitted operation. (required)
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call operationStatusAsync(String operationId, String subscriptionKey, String ocpApimSubscriptionKey, final ApiCallback<OperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = operationStatusCall(operationId, subscriptionKey, ocpApimSubscriptionKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OperationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for sentiment */
    private com.squareup.okhttp.Call sentimentCall(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = multiLanguageBatchInputV2;
        

        // create path and map variables
        String localVarPath = "/sentiment".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (subscriptionKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "subscription-key", subscriptionKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ocpApimSubscriptionKey != null)
        localVarHeaderParams.put("Ocp-Apim-Subscription-Key", apiClient.parameterToString(ocpApimSubscriptionKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * The API returns a numeric score between 0 and 1.               Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment.               Sentiment score is generated using classification techniques.               The input features to the classifier include n-grams, features generated from part-of-speech tags, and word embeddings.               Currently, the following languages are supported: English, Spanish, French, Portuguese.
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param multiLanguageBatchInputV2  (optional)
     * @return SentimentBatchResultV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SentimentBatchResultV2 sentiment(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2) throws ApiException {
        ApiResponse<SentimentBatchResultV2> resp = sentimentWithHttpInfo(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2);
        return resp.getData();
    }

    /**
     * 
     * The API returns a numeric score between 0 and 1.               Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment.               Sentiment score is generated using classification techniques.               The input features to the classifier include n-grams, features generated from part-of-speech tags, and word embeddings.               Currently, the following languages are supported: English, Spanish, French, Portuguese.
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param multiLanguageBatchInputV2  (optional)
     * @return ApiResponse&lt;SentimentBatchResultV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SentimentBatchResultV2> sentimentWithHttpInfo(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2) throws ApiException {
        com.squareup.okhttp.Call call = sentimentCall(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2, null, null);
        Type localVarReturnType = new TypeToken<SentimentBatchResultV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The API returns a numeric score between 0 and 1.               Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative sentiment.               Sentiment score is generated using classification techniques.               The input features to the classifier include n-grams, features generated from part-of-speech tags, and word embeddings.               Currently, the following languages are supported: English, Spanish, French, Portuguese.
     * @param subscriptionKey subscription key in url (optional)
     * @param ocpApimSubscriptionKey subscription key in header (optional)
     * @param multiLanguageBatchInputV2  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sentimentAsync(String subscriptionKey, String ocpApimSubscriptionKey, MultiLanguageBatchInputV2 multiLanguageBatchInputV2, final ApiCallback<SentimentBatchResultV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sentimentCall(subscriptionKey, ocpApimSubscriptionKey, multiLanguageBatchInputV2, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SentimentBatchResultV2>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
